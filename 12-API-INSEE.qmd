---
title: "L'API INSEE"
author: "Claude Grasland"
format: html
embed-resources: true
---



L'utilisation d'API à l'aide des fonctions de base `httpr` et `jsonlite` constitue à moyen terme une étape indispensable de la formation d'un data analyste. Mais heureusement elle n'est pas toujours indispensable pour le débutant car plusieurs packages R (ou Python) ont été développées par des programmeurs pour faciliter l'usage des API. 

Ces packages executent en pratique les commandes de l'API, mais sans que l'utilisateur ait besoin d'avoir aucune connaissance sur la syntaxe de la fonction *GET()* qui a collecté les données ni des transformations effectuées sur les résultats pour transformer les données JSON en *data.frame* ou *tibble*. La connaissance de ces packages spécialisées offre donc une grosse économie de temps ... s'ils ont été bien conçus.



On va prendre comme exemple le package `insee` mis au point récemment pour faciliter l'accès aux données de cette organisation. La documentation du package est accessible par le lien ci-dessous

https://pyr-opendatafr.github.io/R-Insee-Data/articles/insee.html




## Mode d'emploi

On commence par installer le package `insee` ce qui peut prendre quelques minutes mais sera fait une seule fois (sauf mise à jour).


```{r}
### Normal version
# install.packages("insee")

### Development version
# devtools::install_github("InseeFr/R-Insee-Data")
```

On peut ensuite lancer le package pour l'utiliser avec *library()* et on ajoute le package *tidyverse* que l'INSEE semble privilégier pour l'exploitation des données :

```{r insee1, warning = F, comment = F, error = F, message =F}
library(insee)
library(tidyverse,warn.conflicts = F)
library(knitr)
```

### Chargement de la liste des tableaux

On commence par télécharger le catalogue des tableaux de données disponibles,à l'aide de la commande *get_dataset_list()*

```{r insee-tab, warning = F, comment = F, error = F, message =F}
catalogue = get_dataset_list()
kable(head(catalogue))

```

Chaque tableau comporte un très grand nombre de séries chronologiques parmi lesquelles il faut opérer un choix afin d'extraire exactement ce que l'on veut.



### Examen des séries présentes dans un tableau

Une fois que l'on a choisi un tableau, on peut examiner plus en détail les différentes séries qui y sont présentes à l'aide de la commande *get_idbank_list()*. On va par exemple examiner le contenu de la base de données "DECES-MORTALITE" : 


```{r insee-list, warning = F, comment = F, error = F, message =F}
var<-get_idbank_list("DECES-MORTALITE") 
str(var)
```

Le résultat est un tibble comportant 1905 lignes et 39 colonnes. Il correspond en pratique aux 1905 séries chronologiques que l'on peut extraire de la base de données. Chaque série dispose d'un code unique contenu dans la variable *idbank*. 


### Extraction d'une série à l'aide de son identifiant

Une première solution pour extraire une série consiste à parcourir le tableau des variables jusqu'à repérer la ligne qui nous intéresse puis à noter son idbank et à extraire la série correspondante à l'aide de la fonction **get_insee_idbank()**. Par exemple, la première ligne du tableau des variables dont le code est "000436398" va renvoyer un tableau du taux brut de mortalité infantile en France métropolitaine de Janvier 1975  à Décembre 2014. On peut en faire rapidement un graphique avec la fonction *plot()* de R-Base


```{r insee-id, warning = F, comment = F, error = F, message =F}
don<-get_insee_idbank("000436398")
don<-don[order(don$DATE),1:3]
plot(don$DATE,don$OBS_VALUE, 
     type ="l", 
     col="red", 
     ylab = "Décès 0-1 ans pour  1000 naissances",
     xlab = "Données mensuelles",
     main = "Evolution de la mortalité infantile en France (1975-2014)",
     sub = "Source : Insee")
```

On remarque que la courbe a des oscillations saisonnières beaucoup moins fortes après 1995 ce qui est sans doute lié à un changement dans le mode de collecte des données plutôt qu'à la réalité. 

On note aussi que les données s'arrêtent en 2014 ce qui est bizarre puisque l'API devrait nous donner les chiffres les plus récents. en fait les données plus récentes sont disponibles mais elles font partie d'une autre série de données. 



### Extraction d'un ensemble de séries d'un même tableau

Supposons que l'on veuille extraire trois courbes décrivant l'espérance de vie des hommes en France métropolitaine, à 20, 40 et 60 ans. Nous lançons alors une requête pour ne retenir dans le tableau des variables que les lignes qui nous intéressent.  

```{r insee-multi, warning = F, comment = F, error = F, message =F}

sel  = 
  get_idbank_list("DECES-MORTALITE") %>% 
  filter(SEXE == "1") %>%
  filter(FREQ == "A") %>% #données annuelles
  filter(REF_AREA == "FM") %>% #France métropolitaine
  filter(DEMOGRAPHIE %in% c("ESPV-20","ESPV-40","ESPV-60")) # Espérance de vie

kable(head(sel))
```

On découvre que le programme renvoie **6 lignes au lieu de 3**. Pourquoi ? Parce que l'INSEE stocke différemment des séries anciennes et des séries récentes. Il faut donc effectuer une requête sur les 4 codes à la fois pour avoir la série la plus longue. 


### Recupération et nettoyage des données 

On récupère les données puis on procède à un petit nettoyage du tableau pour ne conserver que les colonnes utiles.

```{r insee-clean, warning = F, comment = F, error = F, message =F}

don = get_insee_idbank(sel$idbank)

don2<-don %>% select(ANNEE = DATE, ESPVIE= OBS_VALUE, AGE = TITLE_FR) %>% 
              mutate(AGE = as.factor(AGE)) %>% 
              arrange(AGE, ANNEE)
levels(don2$AGE) <- c("20 ans", "40 ans","60 ans")
kable(head(don2))

```

### Construction d'un graphique

On peut maintenant construire notre graphique à l'aide par exemple de `ggplot2` :

```{r insee-graph, warning = F, comment = F, error = F, message =F}

p<-ggplot(don2) + 
   aes(x=ANNEE,y=ESPVIE, color = AGE) +
    geom_line() +
    ggtitle(label= "Espérance de vie en France Métropolitaine",
            subtitle = "Source : INSEE")+
    scale_x_date("Données annuelles") +
    scale_y_continuous("Années de vie restantes",limits = c(0,NA))
p
```

### Discussion 

Comme on peut le voir, l'utilisation d'un package simplifie l'usage des API mais ne dispense pas d'un apprentissage souvent long pour comprendre toutes les finesses du package (et parfois ses bugs ...). Dans le cas du package INSEE, l'utilisation s'avère assez lourde mais permet d'accéder à un nombre considérable de données !



## Exercices


### Exercice 1 : utilisation du package 'insee'

Construire à l'aide du package INSEE un graphique de l'évolution mensuelle de l'espérance de vie des femmes à la naissance en France Métropolitaine de 1945 à 2023.

```{r, warning = F, comment = F, error = F, message =F, echo=FALSE}
#library(insee)
#library(tidyverse)

sel  = 
  get_idbank_list("DECES-MORTALITE") %>% 
  filter(SEXE == "2") %>%
  filter(FREQ == "A") %>% #données mensuelles
  filter(REF_AREA == "FM") %>% #France métropolitaine
  filter(DEMOGRAPHIE %in% c("ESPV")) # Espérance de vie

don = 
  get_insee_idbank(sel$idbank) %>%
  select(ANNEE = DATE, ESPVIE= OBS_VALUE) %>% 
  arrange(ANNEE)


p = 
    ggplot(don) + 
    aes(x=ANNEE,y=ESPVIE) +
    geom_line(col="red") +
    geom_smooth(method= "lm",col="blue")+
    ggtitle(label= "Espérance de vie à la naissance des femmes en France Métropolitaine",
            subtitle = "Source : INSEE")+
    scale_x_date("Année", limits =as.Date(c("1940-01-01","2023-01-01"))) +
    scale_y_continuous("Durée de vie moyenne")
p


```



