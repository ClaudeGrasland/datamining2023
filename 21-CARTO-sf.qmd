---
title: "CARTO-sf"
author: "Claude Grasland"
format: html
embed-resources: true
---

```{r}
# packages utilitaires
library(knitr)
library(dplyr)
library(jsonlite)

# Data packages
library(wbstats)
library(rnaturalearth)

# Packages cartographiques
library(sf)
library(geojsonsf)
library(mapsf)

```

L'importation et l'exportation de données spatiales peut se faire de différentes manières qui sont illustrées dans trois exemples. L'important est d'aboutir à un fichier de type **sf (spatial features)** combinant les données géométriques et les données statistiques dans un seul objet. Une fois créé, cet obet sera stocké au format interne de R (.RDS). 


## Importation d'un shapefile

### Carte au format shapefile

Beaucoup de fonds de cartes sont stockés au format shapefile, utilisé dans les systèmes d'information géographiques (SIG). Un shapefile se compose en réalité de trois ou quatre fichiers correspondant la géométrie (*fic.shp*), à la projection (*fic.prj*), aux données attributaires (*fic.dbf*), etc..

On charge le fonds de carte au format shapefile avec la fonction `st_read()` du package **sf**. On ne lui indique que le nom du fichier de géométrie et il lit automatiquement les autres.

```{r}
map<-st_read("carto/europe88/euro1988_map.shp")
```

Le fichier est au format *sf* qui est le format cartographique de R. Il comporte une colonne spéciale appelée **geometry**.

```{r}
class(map)
head(map)
```
On peut visualiser la carte enb effectuant un plot de la colonne geometry :

```{r}
plot(map$geometry)
```

### Données au format .csv

```{r}
don<-read.table("carto/europe88/euro1988.csv",
                sep=";",
                header=T,
                encoding = "UTF-8")
class(don)
head(don)
```

### Jointure

```{r}
mapdon<-merge(map,don,by.x="ISO3",by.y="PAYS",all.x=T,all.y=T)
class(mapdon)
head(mapdon)
```

### Essai de cartographie

On utilise ici la fonction d'affichage la plus basique ...

```{r}
plot(mapdon["PNB"])
```

### Sauvegarde du fichier sf

```{r}
saveRDS(mapdon,"carto/europe88/europe88_sf.RDS")
```



## Importation à l'aide de packages

Nous allons essayer de constituer une carte des émissions de CO2 par habitant dans le Monde 2018 basée sur la combinaison des données `wbstats` et du fonds de carte gadm du package  `geodata`.

### Importation du fonds de carte

On charge le fonds de carte des pays du Monde du package geodata 

```{r, eval=FALSE}
library(geodata)
map<-world(resolution=5, path=tempdir())
worldmap<-st_as_sf(map)
saveRDS(worldmap, "carto/world/worldmap.RDS")
```



### Importation des données statistiques

On importe les données statistiques correspondant aux pays qui ont été retenus dans le fonds de carte. Pour cela on utilise l'API de la banque mondiale

```{r, eval=FALSE}
library(wbstats)
df   <- wb_data(indicator  = c("SP.POP.TOTL", "EN.ATM.CO2E.KT"),
                return_wide = TRUE,
                start_date = 2018,
                end_date = 2018)

```

Nous renommons les variables pour avoir un tableau plus simple ou la population est en millions d'habitants, les émissions de CO2 en millions de tonnes. On y ajoute l'intensité des émissions en tonnes par habitant. Puis on sauvegarder le tout.

```{r, eval=FALSE}

don <-df %>% select(iso3 = iso3c,  POP = SP.POP.TOTL, CO2 = EN.ATM.CO2E.KT) %>%
            mutate(POP = POP/1000000, CO2 = CO2/1000, CO2_hab = CO2/POP)
kable(head(don),digits = 2)
saveRDS(don, "carto/world/worlddon.RDS")

```



### Jointure

On charge nos deux fichiers de cartes et de données. Comme ces fichiers comportent un même identifiant et un seul (*iso3*), on peut effectuer la jointure avec la fonction `left_join()` du package **dplyr**.

```{r }
map<-readRDS("carto/world/worldmap.RDS")
don<-readRDS("carto/world/worlddon.RDS")
mapdon <- merge(map, don, 
                by.x="GID_0",
                by.y="iso3",
                all.x=T,
                all.y = F)
kable(head(mapdon))
```


### Essai de cartographie

On réalise ici une belle carte avec le package **mapsf** qui sera expliqué plus loin 

```{r}
library(mapsf)
mf_theme("agolalight")
  mf_map(x= mapdon,
         var = "CO2_hab", 
         type = "choro",
         breaks="jenks",
         leg_pos="bottomleft",
         leg_title = "en tonnes/hab.")
  mf_map(x= mapdon,
         var = "CO2",
         type = "prop",
         inches = 0.2,
         col="red",
         leg_pos = "topleft",
         leg_title = "en millions de tonnes")
mf_title("Emissions de CO2 des pays du Monde en 2018")

```

### Sauvegarde du fichier sf

```{r}
saveRDS(mapdon,"carto/world/worldmapCO2.RDS")
```


## Importation au format GEOJSON

La plupart des API permettent de récupérer directement des fichiers combinant les données statistiques et cartographiques au format GEOJSON. Il suffit alors de les convertir au format sf en une seule opération, sans avoir besoin d'effectuer de jointure.


### Récupération d'un fichier GEOJSON

On commence par repérer une url permettant de récupérer un fichier de type GeoJSON. Puis on récupère le fichier et on l'enregistre à l'aide de la fonction `dowload.file()` en lui donnat l'extension *.geojson*. Ce fichier pourra être utilisé dans d'autres langages de programmation comme Python.

```{r, eval=FALSE}


myurl<- "https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-france-commune/exports/geojson?lang=fr&refine=reg_name%3A%22%C3%8Ele-de-France%22&timezone=Europe%2FBerlin"



download.file(url=myurl,
              destfile="carto/idfcom/idfcom.geojson", 
              method="curl")


```

### Conversion du fichier geojson au format sf

On convertit le fichier geojson au format sf à l'aide de la fonction `geojson_sf()`du package **geojsonsf**. On vérifie que le fichier est bien de la bonne classe 

```{r}
mapdon<-geojson_sf("carto/idfcom/idfcom.geojson")
class(mapdon)
```

### Sélection des variables

On ne conserve que la colonne code et on ajoute une colonne département

```{r}
mapdon<-mapdon %>% select(com_code) %>% 
  mutate(com_code = substr(com_code,3,7),
         depcode = substr(com_code,1,2))
head(mapdon)
```



### Essai de cartographie


```{r}
plot(mapdon["depcode"])

```



### Sauvegarde au format sf

```{r, eval=FALSE}
saveRDS(mapdon,"carto/idfcom/idfcom.RDS")
```


